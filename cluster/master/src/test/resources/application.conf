# Copyright 2016 Antonio Alonso Dominguez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

quckoo {
  home-dir = "target/quckoo"
}

akka {
  actor.provider = cluster
  cluster.seed-nodes = []

  remote.artery.enabled = on

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

  sharding {
    state-store-mode = "persistence"

    journal-plugin-id = "inmemory-journal"
    snapshot-plugin-id = "inmemory-snapshot-store"
  }
}

inmemory-journal {
  event-adapters {
    test-registry-tag  = "io.quckoo.cluster.registry.RegistryTagEventAdapter"
    test-scheduler-tag = "io.quckoo.cluster.scheduler.SchedulerTagEventAdapter"
  }

  event-adapter-bindings {
    "io.quckoo.protocol.registry.JobAccepted" = test-registry-tag
    "io.quckoo.protocol.registry.JobRejected" = test-registry-tag
    "io.quckoo.protocol.registry.JobEnabled"  = test-registry-tag
    "io.quckoo.protocol.registry.JobDisabled" = test-registry-tag

    "io.quckoo.protocol.scheduler.SchedulerEvent"        = test-scheduler-tag
    "io.quckoo.protocol.scheduler.ExecutionPlanStarted"  = test-scheduler-tag
    "io.quckoo.protocol.scheduler.ExecutionPlanFinished" = test-scheduler-tag
    "io.quckoo.protocol.scheduler.TaskScheduled"         = test-scheduler-tag
    "io.quckoo.protocol.scheduler.TaskTriggered"         = test-scheduler-tag
    "io.quckoo.protocol.scheduler.TaskCompleted"         = test-scheduler-tag

    "io.quckoo.cluster.scheduler.ExecutionDriver$Created" = test-scheduler-tag
  }
}

inmemory-read-journal {
  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "5"
}
