# Copyright 2016 Antonio Alonso Dominguez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

quckoo {
  home-dir = "."

  resolver {
    base-dir = "."
    work-dir = ${quckoo.home-dir}"/resolver"
    resolution-cache-dir = ${quckoo.resolver.work-dir}"/cache"
    repository-cache-dir = ${quckoo.resolver.work-dir}"/local"

    repositories = [ ]

    dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"

      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 10
        parallelism-factor = 2.0
      }

      throughput = 10
    }
  }

  http {
    bind-interface = 0.0.0.0
    bind-port = 8095

    request-timeout = 2500ms
  }

  task-queue {
    max-work-timeout = 10m
  }

  api-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"

    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 10
      parallelism-factor = 2.0
    }

    throughput = 10
  }

  trigger-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"

    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-max = 10
      core-pool-size-factor = 2.0
    }

    throughput = 10
  }

}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  extensions = [
    "akka.cluster.client.ClusterClientReceptionist",
    "akka.cluster.metrics.ClusterMetricsExtension"
  ]

  actor {
    provider = cluster

    serialization-bindings {
      "io.quckoo.cluster.registry.PersistentJob$CreateJob"  = kryo
      "io.quckoo.cluster.scheduler.ExecutionDriver$New"     = kryo
      "io.quckoo.cluster.scheduler.ExecutionDriver$Created" = kryo

      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Awake"    = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Start$"   = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Finish"   = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Cancel"   = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$TimeOut$" = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Get$"     = kryo

      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Awaken"    = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Cancelled" = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Triggered" = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Started$"  = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Completed" = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$TimedOut$" = kryo
      "io.quckoo.cluster.scheduler.ExecutionLifecycle$Result"    = kryo
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp.port = 2551
    artery {
      enabled = on
      canonical.port = 25520
    }

    trusted-selection-paths = [
      "/user/quckoo"
    ]
  }

  cluster {
    roles = ["registry", "scheduler"]

    seed-nodes = [ ]

    auto-down-unreachable-after = 10s
  }

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  sharding {
    state-store-mode = "persistence"

    journal-plugin-id = "cassandra-journal"
    snapshot-plugin-id = "cassandra-snapshot-store"
  }
}

cassandra-journal {
  keyspace = "quckoo"

  tags {
    registry       = 1
    task           = 1
    execution-plan = 2
  }

  event-adapters {
    registry-tag  = "io.quckoo.cluster.registry.RegistryTagEventAdapter"
    scheduler-tag = "io.quckoo.cluster.scheduler.SchedulerTagEventAdapter"
  }

  event-adapter-bindings {
    "io.quckoo.protocol.registry.JobAccepted" = registry-tag
    "io.quckoo.protocol.registry.JobRejected" = registry-tag
    "io.quckoo.protocol.registry.JobEnabled"  = registry-tag
    "io.quckoo.protocol.registry.JobDisabled" = registry-tag

    "io.quckoo.protocol.scheduler.SchedulerEvent"        = scheduler-tag
    "io.quckoo.protocol.scheduler.ExecutionPlanStarted"  = scheduler-tag
    "io.quckoo.protocol.scheduler.ExecutionPlanFinished" = scheduler-tag
    "io.quckoo.protocol.scheduler.TaskScheduled"         = scheduler-tag
    "io.quckoo.protocol.scheduler.TaskTriggered"         = scheduler-tag
    "io.quckoo.protocol.scheduler.TaskCompleted"         = scheduler-tag

    "io.quckoo.cluster.scheduler.ExecutionDriver$Created" = scheduler-tag
  }

}

cassandra-snapshot-store {
  keyspace = "quckoo_snapshot"
}
