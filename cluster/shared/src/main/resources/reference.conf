quckoo.resolver {

  work-dir = "target/ivy"
  resolution-cache-dir = ${quckoo.resolver.work-dir}"/cache"
  repository-cache-dir = ${quckoo.resolver.work-dir}"/local"

  repositories = [ ]

  dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"

    for-join-executor {
      parallelism-min = 2
      parallelism-max = 10
      parallelism-factor = 2.0
    }

    throughput = 10
  }

}

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "io.quckoo.Task"          = kryo
      "io.quckoo.ExecutionPlan" = kryo

      "io.quckoo.protocol.client.ClientCommand" = kryo
      "io.quckoo.protocol.client.ClientEvent" = kryo

      // Registry messages/events
      "io.quckoo.protocol.registry.RegistryCommand" = kryo
      "io.quckoo.protocol.registry.RegistryEvent"   = kryo
      "io.quckoo.protocol.registry.RegisterJob"     = kryo
      "io.quckoo.protocol.registry.JobAccepted"     = kryo
      "io.quckoo.protocol.registry.JobRejected"     = kryo
      "io.quckoo.protocol.registry.DisableJob"      = kryo
      "io.quckoo.protocol.registry.JobDisabled"     = kryo
      "io.quckoo.protocol.registry.EnableJob"       = kryo
      "io.quckoo.protocol.registry.JobEnabled"      = kryo
      "io.quckoo.protocol.registry.JobNotFound"     = kryo

      "io.quckoo.protocol.scheduler.SchedulerCommand"      = kryo
      "io.quckoo.protocol.scheduler.SchedulerEvent"        = kryo
      "io.quckoo.protocol.scheduler.ExecutionPlanStarted"  = kryo
      "io.quckoo.protocol.scheduler.ExecutionPlanFinished" = kryo
      "io.quckoo.protocol.scheduler.TaskScheduled"         = kryo
      "io.quckoo.protocol.scheduler.TaskTriggered"         = kryo
      "io.quckoo.protocol.scheduler.TaskCompleted"         = kryo
      "io.quckoo.protocol.scheduler.JobNotEnabled"         = kryo
      "io.quckoo.protocol.scheduler.JobFailedToSchedule"   = kryo
      "io.quckoo.protocol.scheduler.GetExecutionPlan"      = kryo
      "io.quckoo.protocol.scheduler.GetExecutionPlans"     = kryo
      "io.quckoo.protocol.scheduler.CancelPlan"            = kryo

      "io.quckoo.protocol.worker.WorkerEvent" = kryo

      "io.quckoo.cluster.protocol.MasterMessage"  = kryo
      "io.quckoo.cluster.protocol.WorkerMessage"  = kryo
      "io.quckoo.cluster.protocol.RegisterWorker" = kryo
      "io.quckoo.cluster.protocol.RequestTask"    = kryo
      "io.quckoo.cluster.protocol.TaskDone"       = kryo
      "io.quckoo.cluster.protocol.TaskFailed"     = kryo
      "io.quckoo.cluster.protocol.TaskReady$"     = kryo
      "io.quckoo.cluster.protocol.TaskDoneAck"    = kryo
    }

    kryo {
      idstrategy = "automatic"
      //idstrategy = "default"

      implicit-registration-logging = true

      mappings {
        "io.quckoo.Task" = 20,
        "io.quckoo.ExecutionPlan" = 21
        //"io.quckoo.protocol.registry.RegisterJob" = 100
        //"io.quckoo.protocol.registry.JobAccepted" = 101
      }

      classes = [
        "io.quckoo.Task",
        //"io.quckoo.protocol.registry.JobAccepted"
      ]
    }
  }
}
