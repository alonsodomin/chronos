# Copyright 2016 Antonio Alonso Dominguez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  log-dead-letters-during-shutdown = off

  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "io.quckoo.JobId"         = kryo
      "io.quckoo.PlanId"        = kryo
      "io.quckoo.TaskId"        = kryo
      "io.quckoo.NodeId"        = kryo
      "io.quckoo.Task"          = kryo
      "io.quckoo.ExecutionPlan" = kryo
      "io.quckoo.JobNotFound"   = kryo
      "io.quckoo.JobNotEnabled" = kryo

      "io.quckoo.protocol.client.ClientCommand" = kryo
      "io.quckoo.protocol.client.ClientEvent" = kryo

      // Registry messages/events
      "io.quckoo.protocol.registry.RegistryCommand" = kryo
      "io.quckoo.protocol.registry.RegistryEvent"   = kryo
      "io.quckoo.protocol.registry.RegisterJob"     = kryo
      "io.quckoo.protocol.registry.GetJob"          = kryo
      "io.quckoo.protocol.registry.JobAccepted"     = kryo
      "io.quckoo.protocol.registry.JobRejected"     = kryo
      "io.quckoo.protocol.registry.DisableJob"      = kryo
      "io.quckoo.protocol.registry.JobDisabled"     = kryo
      "io.quckoo.protocol.registry.EnableJob"       = kryo
      "io.quckoo.protocol.registry.JobEnabled"      = kryo

      "io.quckoo.protocol.scheduler.SchedulerCommand"       = kryo
      "io.quckoo.protocol.scheduler.SchedulerEvent"         = kryo
      "io.quckoo.protocol.scheduler.ExecutionPlanStarted"   = kryo
      "io.quckoo.protocol.scheduler.ExecutionPlanFinished"  = kryo
      "io.quckoo.protocol.scheduler.ExecutionPlanCancelled" = kryo
      "io.quckoo.protocol.scheduler.TaskScheduled"          = kryo
      "io.quckoo.protocol.scheduler.TaskTriggered"          = kryo
      "io.quckoo.protocol.scheduler.TaskCompleted"          = kryo
      "io.quckoo.protocol.scheduler.JobFailedToSchedule"    = kryo
      "io.quckoo.protocol.scheduler.GetExecutionPlan"       = kryo
      "io.quckoo.protocol.scheduler.GetExecutionPlans"      = kryo
      "io.quckoo.protocol.scheduler.CancelExecutionPlan"    = kryo
      "io.quckoo.protocol.scheduler.TaskQueueUpdated"       = kryo

      "io.quckoo.protocol.worker.WorkerJoined"  = kryo
      "io.quckoo.protocol.worker.WorkerLost"    = kryo
      "io.quckoo.protocol.worker.WorkerRemoved" = kryo

      "io.quckoo.protocol.client.Connect$"      = kryo
      "io.quckoo.protocol.client.Connected$"    = kryo
      "io.quckoo.protocol.client.Disconnect$"   = kryo
      "io.quckoo.protocol.client.Disconnected$" = kryo

      "io.quckoo.protocol.cluster.MasterReachable"   = kryo
      "io.quckoo.protocol.cluster.MasterUnreachable" = kryo
      "io.quckoo.protocol.cluster.MasterJoined"      = kryo
      "io.quckoo.protocol.cluster.MasterRemoved"     = kryo
      "io.quckoo.protocol.cluster.GetClusterStatus$" = kryo

      "io.quckoo.cluster.protocol.MasterMessage"  = kryo
      "io.quckoo.cluster.protocol.WorkerMessage"  = kryo
      "io.quckoo.cluster.protocol.RegisterWorker" = kryo
      "io.quckoo.cluster.protocol.RequestTask"    = kryo
      "io.quckoo.cluster.protocol.TaskDone"       = kryo
      "io.quckoo.cluster.protocol.TaskFailed"     = kryo
      "io.quckoo.cluster.protocol.TaskReady$"     = kryo
      "io.quckoo.cluster.protocol.TaskDoneAck"    = kryo
    }

    kryo {
      idstrategy = "automatic"
      //idstrategy = "default"

      implicit-registration-logging = true

      kryo-custom-serializer-init = "io.quckoo.serialization.kryo.KryoInitializer"

      mappings {
        "io.quckoo.Task" = 20,
        "io.quckoo.ExecutionPlan" = 21
        //"io.quckoo.protocol.registry.RegisterJob" = 100
        //"io.quckoo.protocol.registry.JobAccepted" = 101
      }

      classes = [
        "io.quckoo.Task",
        //"io.quckoo.protocol.registry.JobAccepted"
      ]
    }
  }
}

kamon {
  metric {
    tick-interval = 1 seconds
  }

  internal-config {
    akka {
      remote.netty.tcp.port = 3551
    }
  }
}